// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KastleSDK_VM
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import AudioToolbox
import Combine
import CoreData
import DeveloperToolsSupport
import Foundation
@_exported import KastleSDK_VM
import MessageUI
import OSLog
import PDFKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class BundlePath {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class VisitorInteractor : ObjectiveC.NSObject {
  @objc public static func shared() -> KastleSDK_VM.VisitorInteractor
  @objc public func setColorConfiguration(appColorConfiguration: any KastleSDK_VM.ColorConfigurable)
  public func setFontConfiguration(appFontConfiguration: (any KastleSDK_VM.FontConfigurable)?)
  @objc public func showVisitorView(navigationBarHidden nagBarHidden: Swift.Bool, backActionCompletion: @escaping () -> (), onUnAuth: @escaping () -> ()) -> UIKit.UIViewController
  @objc public func exportPdfLog()
  public func mailView(recipientMail: Swift.String, isShowing: SwiftUI.Binding<Swift.Bool>, callback: ((Swift.Result<MessageUI.MFMailComposeResult, any Swift.Error>) -> Swift.Void)?) -> some SwiftUI.View
  
  @objc public func getVisitorManagementLogsInStringType() -> Swift.String
  @objc deinit
}
@objc public protocol ColorConfigurable {
  @objc func matchColor() -> [Swift.String : Swift.String]
}
public protocol FontConfigurable {
  var headingFont: SwiftUI.Font? { get }
  var bodyFont: SwiftUI.Font? { get }
  var textFont_MediumTitleLarge: SwiftUI.Font? { get }
  var textFont_MediumTitle: SwiftUI.Font? { get }
  var textFont_MediumHeadline: SwiftUI.Font? { get }
  var textFont_MediumBody: SwiftUI.Font? { get }
  var textFont_MediumFootnote: SwiftUI.Font? { get }
  var textFont_MediumCaption: SwiftUI.Font? { get }
  var textFont_MediumSmall: SwiftUI.Font? { get }
  var checkboxFont_RegularTitleLarge: SwiftUI.Font? { get }
  var textFont_LightTitleLarge: SwiftUI.Font? { get }
  var textFont_LightTitle: SwiftUI.Font? { get }
  var textFont_LightHeadline: SwiftUI.Font? { get }
  var textFont_LightBody: SwiftUI.Font? { get }
  var textFont_LightFootnote: SwiftUI.Font? { get }
  var textFont_LightCaption: SwiftUI.Font? { get }
  var textFont_LightSmall: SwiftUI.Font? { get }
  var textFont_HeavyTitleLarge: SwiftUI.Font? { get }
  var textFont_HeavyTitle: SwiftUI.Font? { get }
  var textFont_HeavyHeadline: SwiftUI.Font? { get }
  var textFont_HeavyBody: SwiftUI.Font? { get }
  var textFont_HeavyFootnote: SwiftUI.Font? { get }
  var textFont_HeavyCaption: SwiftUI.Font? { get }
  var textFont_HeavySmall: SwiftUI.Font? { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class ColorConfigurationManager : ObjectiveC.NSObject {
  @objc public static let shared: KastleSDK_VM.ColorConfigurationManager
  @objc public var colors: [Swift.String : Swift.String]
  @objc public var configuration: (any KastleSDK_VM.ColorConfigurable)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class FontConfigurationManager : ObjectiveC.NSObject {
  @objc public static let shared: KastleSDK_VM.FontConfigurationManager
  public var configuration: (any KastleSDK_VM.FontConfigurable)?
  @objc deinit
}
public struct VMLog {
  public static let logger: os.Logger
}
public protocol CancelButtonDelegate {
  func tappedOnCancelButton()
}
public struct KSVMColorStyle {
  public static func shared() -> KastleSDK_VM.KSVMColorStyle?
  public enum KSVMColor : Swift.String {
    case primaryDark
    case secondaryDark
    case primaryLight
    case secondaryLight
    case accentLoyalty
    case accentBrand
    case background
    case error
    case success
    case separator
    case inActive
    case transparent
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(name: KastleSDK_VM.KSVMColorStyle.KSVMColor)
}
public struct ComposeMailData {
  public let subject: Swift.String
  public let recipients: [Swift.String]?
  public let message: Swift.String
  public let attachments: [KastleSDK_VM.AttachmentData]?
}
public struct AttachmentData {
  public let data: Foundation.Data
  public let mimeType: Swift.String
  public let fileName: Swift.String
}
@objc @objcMembers public class UserSDKData : ObjectiveC.NSObject {
  @objc public init(firstName: Swift.String, lastName: Swift.String, email: Swift.String, cardHolderID: Swift.String, cardHolderGuid: Swift.String, profileUrl: Swift.String, enterpriseId: Swift.String, enterpriseName: Swift.String, isResidentialUser: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(VisitorDetail) public class VisitorDetail : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension KastleSDK_VM.VisitorDetail {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<KastleSDK_VM.VisitorDetail>
}
extension KastleSDK_VM.VisitorDetail : Swift.Identifiable {
  public typealias ID = Swift.ObjectIdentifier
}
extension KastleSDK_VM.KSVMColorStyle.KSVMColor : Swift.Equatable {}
extension KastleSDK_VM.KSVMColorStyle.KSVMColor : Swift.Hashable {}
extension KastleSDK_VM.KSVMColorStyle.KSVMColor : Swift.RawRepresentable {}
